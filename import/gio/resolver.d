// Generated by gnome-h2d.rb <http://github.com/ddude/gnome.d>.

module gio.resolver;

/* GIO - GLib Input, Output and Streaming Library
 *
 * Copyright (C) 2008 Red Hat, Inc.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 */

/+
#if !defined (__GIO_GIO_H_INSIDE__) && !defined (GIO_COMPILATION)
#error "Only <gio/gio.h> can be included directly."
//#endif
+/



public import gio.types;

extern(C):

//#define G_TYPE_RESOLVER         (g_resolver_get_type ())
//#define G_RESOLVER(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), G_TYPE_RESOLVER, GResolver))
//#define G_RESOLVER_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST((k), G_TYPE_RESOLVER, GResolverClass))
//#define G_IS_RESOLVER(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), G_TYPE_RESOLVER))
//#define G_IS_RESOLVER_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), G_TYPE_RESOLVER))
//#define G_RESOLVER_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), G_TYPE_RESOLVER, GResolverClass))

struct _GResolverPrivate;
alias _GResolverPrivate* GResolverPrivate;
//struct _GResolverClass   GResolverClass;

struct GResolver {
  GObject parent_instance;

  GResolverPrivate *priv;
};

struct GResolverClass {
  GObjectClass parent_class;

  /* Signals */
  void    function(GResolver            *resolver) reload;

  /* Virtual methods */
  GList * function(GResolver            *resolver,
					const(gchar)*          hostname,
					GCancellable         *cancellable,
					GError              **error) lookup_by_name;
  void    function(GResolver            *resolver,
					const(gchar)*          hostname,
					GCancellable         *cancellable,
					GAsyncReadyCallback   callback,
					gpointer              user_data) lookup_by_name_async;
  GList * function(GResolver            *resolver,
					GAsyncResult         *result,
					GError              **error) lookup_by_name_finish;

  gchar * function(GResolver            *resolver,
					GInetAddress         *address,
					GCancellable         *cancellable,
					GError              **error) lookup_by_address;
  void    function(GResolver            *resolver,
					GInetAddress         *address,
					GCancellable         *cancellable,
					GAsyncReadyCallback   callback,
					gpointer              user_data) lookup_by_address_async;
  gchar * function(GResolver            *resolver,
					GAsyncResult         *result,
					GError              **error) lookup_by_address_finish;

  GList * function(GResolver            *resolver,
					const(gchar)*          rrname,
					GCancellable         *cancellable,
					GError              **error) lookup_service;
  void    function(GResolver            *resolver,
					const(gchar)*          rrname,
					GCancellable         *cancellable,
					GAsyncReadyCallback   callback,
					gpointer              user_data) lookup_service_async;
  GList * function(GResolver            *resolver,
					GAsyncResult         *result,
					GError              **error) lookup_service_finish;

  GList * function(GResolver            *resolver,
                                        const(gchar)*          rrname,
                                        GResolverRecordType   record_type,
                                        GCancellable         *cancellable,
                                        GError              **error) lookup_records;

  void    function(GResolver            *resolver,
                                        const(gchar)*          rrname,
                                        GResolverRecordType   record_type,
                                        GCancellable         *cancellable,
                                        GAsyncReadyCallback   callback,
                                        gpointer              user_data) lookup_records_async;

  GList * function(GResolver            *resolver,
                                        GAsyncResult         *result,
                                        GError              **error) lookup_records_finish;

  /* Padding for future expansion */
  void function() _g_reserved4;
  void function() _g_reserved5;
  void function() _g_reserved6;

};

GType      g_resolver_get_type                  () pure;
GResolver *g_resolver_get_default               ();
void       g_resolver_set_default               (GResolver            *resolver);

GList     *g_resolver_lookup_by_name            (GResolver            *resolver,
						 const(gchar)*          hostname,
						 GCancellable         *cancellable,
						 GError              **error);
void       g_resolver_lookup_by_name_async      (GResolver            *resolver,
						 const(gchar)*          hostname,
						 GCancellable         *cancellable,
						 GAsyncReadyCallback   callback,
						 gpointer              user_data);
GList     *g_resolver_lookup_by_name_finish     (GResolver            *resolver,
						 GAsyncResult         *result,
						 GError              **error);

void       g_resolver_free_addresses            (GList                *addresses);

gchar     *g_resolver_lookup_by_address         (GResolver            *resolver,
						 GInetAddress         *address,
						 GCancellable         *cancellable,
						 GError              **error);
void       g_resolver_lookup_by_address_async   (GResolver            *resolver,
						 GInetAddress         *address,
						 GCancellable         *cancellable,
						 GAsyncReadyCallback   callback,
						 gpointer              user_data);
gchar     *g_resolver_lookup_by_address_finish  (GResolver            *resolver,
						 GAsyncResult         *result,
						 GError              **error);

GList     *g_resolver_lookup_service            (GResolver            *resolver,
						 const(gchar)*          service,
						 const(gchar)*          protocol,
						 const(gchar)*          domain,
						 GCancellable         *cancellable,
						 GError              **error);
void       g_resolver_lookup_service_async      (GResolver            *resolver,
						 const(gchar)*          service,
						 const(gchar)*          protocol,
						 const(gchar)*          domain,
						 GCancellable         *cancellable,
						 GAsyncReadyCallback   callback,
						 gpointer              user_data);
GList     *g_resolver_lookup_service_finish     (GResolver            *resolver,
						 GAsyncResult         *result,
						 GError              **error);

/+ GLIB_AVAILABLE_IN_2_34 +/
GList     *g_resolver_lookup_records            (GResolver            *resolver,
                                                 const(gchar)*          rrname,
                                                 GResolverRecordType   record_type,
                                                 GCancellable         *cancellable,
                                                 GError              **error);
/+ GLIB_AVAILABLE_IN_2_34 +/
void       g_resolver_lookup_records_async      (GResolver            *resolver,
                                                 const(gchar)*          rrname,
                                                 GResolverRecordType   record_type,
                                                 GCancellable         *cancellable,
                                                 GAsyncReadyCallback   callback,
                                                 gpointer              user_data);
/+ GLIB_AVAILABLE_IN_2_34 +/
GList     *g_resolver_lookup_records_finish     (GResolver            *resolver,
                                                 GAsyncResult         *result,
                                                 GError              **error);

void       g_resolver_free_targets              (GList                *targets);

/**
 * G_RESOLVER_ERROR:
 *
 * Error domain for #GResolver. Errors in this domain will be from the
 * #GResolverError enumeration. See #GError for more information on
 * error domains.
 */
//#define G_RESOLVER_ERROR (g_resolver_error_quark ())
GQuark g_resolver_error_quark ();




