// Generated by gnome-h2d.rb <http://github.com/ddude/gnome.d>.

module gio.dbusauthmechanism;

/* GDBus - GLib D-Bus Library
 *
 * Copyright (C) 2008-2010 Red Hat, Inc.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * Author: David Zeuthen <davidz@redhat.com>
 */

/+
#if !defined (GIO_COMPILATION)
#error "gdbusauthmechanism.h is a private header file."
//#endif
+/



public import gio.types;

extern(C):

//#define G_TYPE_DBUS_AUTH_MECHANISM         (_g_dbus_auth_mechanism_get_type ())
//#define G_DBUS_AUTH_MECHANISM(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), G_TYPE_DBUS_AUTH_MECHANISM, GDBusAuthMechanism))
//#define G_DBUS_AUTH_MECHANISM_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST((k), G_TYPE_DBUS_AUTH_MECHANISM, GDBusAuthMechanismClass))
//#define G_DBUS_AUTH_MECHANISM_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), G_TYPE_DBUS_AUTH_MECHANISM, GDBusAuthMechanismClass))
//#define G_IS_DBUS_AUTH_MECHANISM(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), G_TYPE_DBUS_AUTH_MECHANISM))
//#define G_IS_DBUS_AUTH_MECHANISM_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), G_TYPE_DBUS_AUTH_MECHANISM))

//struct _GDBusAuthMechanism        GDBusAuthMechanism;
//struct _GDBusAuthMechanismClass   GDBusAuthMechanismClass;
struct _GDBusAuthMechanismPrivate;
alias _GDBusAuthMechanismPrivate* GDBusAuthMechanismPrivate;

enum GDBusAuthMechanismState {
  G_DBUS_AUTH_MECHANISM_STATE_INVALID,
  G_DBUS_AUTH_MECHANISM_STATE_WAITING_FOR_DATA,
  G_DBUS_AUTH_MECHANISM_STATE_HAVE_DATA_TO_SEND,
  G_DBUS_AUTH_MECHANISM_STATE_REJECTED,
  G_DBUS_AUTH_MECHANISM_STATE_ACCEPTED,
}

struct GDBusAuthMechanismClass {
  /*< private >*/
  GObjectClass parent_class;

  /*< public >*/

  /* VTable */

  /* TODO: server_initiate and client_initiate probably needs to have a
   * GCredentials parameter...
   */

  gint                      function() get_priority;
  const(gchar)*              function() get_name;

  /* functions shared by server/client */
  gboolean                  function(GDBusAuthMechanism   *mechanism) is_supported;
  gchar                    *function(GDBusAuthMechanism   *mechanism,
                                                         const(gchar)*          data,
                                                         gsize                 data_len,
                                                         gsize                *out_data_len) encode_data;
  gchar                    *function(GDBusAuthMechanism   *mechanism,
                                                         const(gchar)*          data,
                                                         gsize                 data_len,
                                                         gsize                *out_data_len) decode_data;

  /* functions for server-side authentication */
  GDBusAuthMechanismState   function(GDBusAuthMechanism   *mechanism) server_get_state;
  void                      function(GDBusAuthMechanism   *mechanism,
                                                         const(gchar)*          initial_response,
                                                         gsize                 initial_response_len) server_initiate;
  void                      function(GDBusAuthMechanism   *mechanism,
                                                         const(gchar)*          data,
                                                         gsize                 data_len) server_data_receive;
  gchar                    *function(GDBusAuthMechanism   *mechanism,
                                                         gsize                *out_data_len) server_data_send;
  gchar                    *function(GDBusAuthMechanism   *mechanism) server_get_reject_reason;
  void                      function(GDBusAuthMechanism   *mechanism) server_shutdown;

  /* functions for client-side authentication */
  GDBusAuthMechanismState   function(GDBusAuthMechanism   *mechanism) client_get_state;
  gchar                    *function(GDBusAuthMechanism   *mechanism,
                                                         gsize                *out_initial_response_len) client_initiate;
  void                      function(GDBusAuthMechanism   *mechanism,
                                                         const(gchar)*          data,
                                                         gsize                 data_len) client_data_receive;
  gchar                    *function(GDBusAuthMechanism   *mechanism,
                                                         gsize                *out_data_len) client_data_send;
  void                      function(GDBusAuthMechanism   *mechanism) client_shutdown;
};

struct GDBusAuthMechanism {
  GObject parent_instance;
  GDBusAuthMechanismPrivate *priv;
};

GType                     _g_dbus_auth_mechanism_get_type                 () pure;

gint                      _g_dbus_auth_mechanism_get_priority             (GType                 mechanism_type);
const(gchar)*              _g_dbus_auth_mechanism_get_name                 (GType                 mechanism_type);

GIOStream                *_g_dbus_auth_mechanism_get_stream               (GDBusAuthMechanism   *mechanism);
GCredentials             *_g_dbus_auth_mechanism_get_credentials          (GDBusAuthMechanism   *mechanism);

gboolean                  _g_dbus_auth_mechanism_is_supported             (GDBusAuthMechanism   *mechanism);
gchar                    *_g_dbus_auth_mechanism_encode_data              (GDBusAuthMechanism   *mechanism,
                                                                           const(gchar)*          data,
                                                                           gsize                 data_len,
                                                                           gsize                *out_data_len);
gchar                    *_g_dbus_auth_mechanism_decode_data              (GDBusAuthMechanism   *mechanism,
                                                                           const(gchar)*          data,
                                                                           gsize                 data_len,
                                                                           gsize                *out_data_len);

GDBusAuthMechanismState   _g_dbus_auth_mechanism_server_get_state         (GDBusAuthMechanism   *mechanism);
void                      _g_dbus_auth_mechanism_server_initiate          (GDBusAuthMechanism   *mechanism,
                                                                           const(gchar)*          initial_response,
                                                                           gsize                 initial_response_len);
void                      _g_dbus_auth_mechanism_server_data_receive      (GDBusAuthMechanism   *mechanism,
                                                                           const(gchar)*          data,
                                                                           gsize                 data_len);
gchar                    *_g_dbus_auth_mechanism_server_data_send         (GDBusAuthMechanism   *mechanism,
                                                                           gsize                *out_data_len);
gchar                    *_g_dbus_auth_mechanism_server_get_reject_reason (GDBusAuthMechanism   *mechanism);
void                      _g_dbus_auth_mechanism_server_shutdown          (GDBusAuthMechanism   *mechanism);

GDBusAuthMechanismState   _g_dbus_auth_mechanism_client_get_state         (GDBusAuthMechanism   *mechanism);
gchar                    *_g_dbus_auth_mechanism_client_initiate          (GDBusAuthMechanism   *mechanism,
                                                                           gsize                *out_initial_response_len);
void                      _g_dbus_auth_mechanism_client_data_receive      (GDBusAuthMechanism   *mechanism,
                                                                           const(gchar)*          data,
                                                                           gsize                 data_len);
gchar                    *_g_dbus_auth_mechanism_client_data_send         (GDBusAuthMechanism   *mechanism,
                                                                          gsize                *out_data_len);
void                      _g_dbus_auth_mechanism_client_shutdown          (GDBusAuthMechanism   *mechanism);





