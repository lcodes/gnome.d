// Generated by gnome-h2d.rb <http://github.com/ddude/gnome.d>.

module gio.simpleactiongroup;

/*
 * Copyright Â© 2010 Codethink Limited
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; either version 2 of the licence or (at
 * your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * Authors: Ryan Lortie <desrt@desrt.ca>
 */

/+
#if !defined (__GIO_GIO_H_INSIDE__) && !defined (GIO_COMPILATION)
#error "Only <gio/gio.h> can be included directly."
//#endif
+/



public import gio.actiongroup;
public import gio.actionmap;

extern(C):

//#define G_TYPE_SIMPLE_ACTION_GROUP                          (g_simple_action_group_get_type ())
//#define G_SIMPLE_ACTION_GROUP(inst)                         (G_TYPE_CHECK_INSTANCE_CAST ((inst),                     
//                                                             G_TYPE_SIMPLE_ACTION_GROUP, GSimpleActionGroup))
//#define G_SIMPLE_ACTION_GROUP_CLASS(class)                  (G_TYPE_CHECK_CLASS_CAST ((class),                       
//                                                             G_TYPE_SIMPLE_ACTION_GROUP, GSimpleActionGroupClass))
//#define G_IS_SIMPLE_ACTION_GROUP(inst)                      (G_TYPE_CHECK_INSTANCE_TYPE ((inst),                     
//                                                             G_TYPE_SIMPLE_ACTION_GROUP))
//#define G_IS_SIMPLE_ACTION_GROUP_CLASS(class)               (G_TYPE_CHECK_CLASS_TYPE ((class),                       
//                                                             G_TYPE_SIMPLE_ACTION_GROUP))
//#define G_SIMPLE_ACTION_GROUP_GET_CLASS(inst)               (G_TYPE_INSTANCE_GET_CLASS ((inst),                      
//                                                             G_TYPE_SIMPLE_ACTION_GROUP, GSimpleActionGroupClass))

struct _GSimpleActionGroupPrivate;
alias _GSimpleActionGroupPrivate* GSimpleActionGroupPrivate;
//struct _GSimpleActionGroupClass                     GSimpleActionGroupClass;

/**
 * GSimpleActionGroup:
 *
 * The #GSimpleActionGroup structure contains private data and should only be accessed using the provided API.
 *
 * Since: 2.28
 */
struct GSimpleActionGroup {
  /*< private >*/
  GObject parent_instance;

  GSimpleActionGroupPrivate *priv;
};

struct GSimpleActionGroupClass {
  /*< private >*/
  GObjectClass parent_class;

  /*< private >*/
  gpointer padding[12];
};

GType                   g_simple_action_group_get_type                  () pure;

GSimpleActionGroup *    g_simple_action_group_new                       ();

GAction *               g_simple_action_group_lookup                    (GSimpleActionGroup *simple,
                                                                         const(gchar)*        action_name);

void                    g_simple_action_group_insert                    (GSimpleActionGroup *simple,
                                                                         GAction            *action);

void                    g_simple_action_group_remove                    (GSimpleActionGroup *simple,
                                                                         const(gchar)*        action_name);

void                    g_simple_action_group_add_entries               (GSimpleActionGroup *simple,
                                                                         const(GActionEntry)* entries,
                                                                         gint                n_entries,
                                                                         gpointer            user_data);




