// Generated by gnome-h2d.rb <http://github.com/ddude/gnome.d>.

module gio.unixoutputstream;

/* GIO - GLib Input, Output and Streaming Library
 *
 * Copyright (C) 2006-2007 Red Hat, Inc.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * Author: Alexander Larsson <alexl@redhat.com>
 */



public import gio.gio;

extern(C):

//#define G_TYPE_UNIX_OUTPUT_STREAM         (g_unix_output_stream_get_type ())
//#define G_UNIX_OUTPUT_STREAM(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), G_TYPE_UNIX_OUTPUT_STREAM, GUnixOutputStream))
//#define G_UNIX_OUTPUT_STREAM_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST((k), G_TYPE_UNIX_OUTPUT_STREAM, GUnixOutputStreamClass))
//#define G_IS_UNIX_OUTPUT_STREAM(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), G_TYPE_UNIX_OUTPUT_STREAM))
//#define G_IS_UNIX_OUTPUT_STREAM_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), G_TYPE_UNIX_OUTPUT_STREAM))
//#define G_UNIX_OUTPUT_STREAM_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), G_TYPE_UNIX_OUTPUT_STREAM, GUnixOutputStreamClass))

/**
 * GUnixOutputStream:
 *
 * Implements #GOutputStream for outputting to selectable unix file descriptors
 **/
//struct _GUnixOutputStream         GUnixOutputStream;
//struct _GUnixOutputStreamClass    GUnixOutputStreamClass;
struct _GUnixOutputStreamPrivate;
alias _GUnixOutputStreamPrivate* GUnixOutputStreamPrivate;

struct GUnixOutputStream {
  GOutputStream parent_instance;

  /*< private >*/
  GUnixOutputStreamPrivate *priv;
};

struct GUnixOutputStreamClass {
  GOutputStreamClass parent_class;

  /*< private >*/
  /* Padding for future expansion */
  void function() _g_reserved1;
  void function() _g_reserved2;
  void function() _g_reserved3;
  void function() _g_reserved4;
  void function() _g_reserved5;
};

GType           g_unix_output_stream_get_type     () pure;

GOutputStream * g_unix_output_stream_new          (gint     fd,
                                                   gboolean close_fd);
void            g_unix_output_stream_set_close_fd (GUnixOutputStream *stream,
                                                   gboolean           close_fd);
gboolean        g_unix_output_stream_get_close_fd (GUnixOutputStream *stream);
gint            g_unix_output_stream_get_fd       (GUnixOutputStream *stream);



