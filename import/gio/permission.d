// Generated by gnome-h2d.rb <http://github.com/ddude/gnome.d>.

module gio.permission;

/*
 * Copyright Â© 2010 Codethink Limited
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the licence, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * Author: Ryan Lortie <desrt@desrt.ca>
 */

/+
#if !defined (__GIO_GIO_H_INSIDE__) && !defined (GIO_COMPILATION)
#error "Only <gio/gio.h> can be included directly."
//#endif
+/



public import gio.types;

extern(C):

//#define G_TYPE_PERMISSION             (g_permission_get_type ())
//#define G_PERMISSION(inst)            (G_TYPE_CHECK_INSTANCE_CAST ((inst),   
//                                       G_TYPE_PERMISSION, GPermission))
//#define G_PERMISSION_CLASS(class)     (G_TYPE_CHECK_CLASS_CAST ((class),     
//                                       G_TYPE_PERMISSION, GPermissionClass))
//#define G_IS_PERMISSION(inst)         (G_TYPE_CHECK_INSTANCE_TYPE ((inst),   
//                                       G_TYPE_PERMISSION))
//#define G_IS_PERMISSION_CLASS(class)  (G_TYPE_CHECK_CLASS_TYPE ((class),     
//                                       G_TYPE_PERMISSION))
//#define G_PERMISSION_GET_CLASS(inst)  (G_TYPE_INSTANCE_GET_CLASS ((inst),    
//                                       G_TYPE_PERMISSION, GPermissionClass))

struct _GPermissionPrivate;
alias _GPermissionPrivate* GPermissionPrivate;
//struct _GPermissionClass      GPermissionClass;

struct GPermission {
  GObject parent_instance;

  /*< private >*/
  GPermissionPrivate *priv;
};

struct GPermissionClass {
  GObjectClass parent_class;

  gboolean function(GPermission          *permission,
                              GCancellable         *cancellable,
                              GError              **error) acquire;
  void     function(GPermission          *permission,
                              GCancellable         *cancellable,
                              GAsyncReadyCallback   callback,
                              gpointer              user_data) acquire_async;
  gboolean function(GPermission          *permission,
                              GAsyncResult         *result,
                              GError              **error) acquire_finish;

  gboolean function(GPermission          *permission,
                              GCancellable         *cancellable,
                              GError              **error) release;
  void     function(GPermission          *permission,
                              GCancellable         *cancellable,
                              GAsyncReadyCallback   callback,
                              gpointer              user_data) release_async;
  gboolean function(GPermission          *permission,
                              GAsyncResult         *result,
                              GError              **error) release_finish;

  gpointer reserved[16];
};

GType           g_permission_get_type           ();
gboolean        g_permission_acquire            (GPermission          *permission,
                                                 GCancellable         *cancellable,
                                                 GError              **error);
void            g_permission_acquire_async      (GPermission          *permission,
                                                 GCancellable         *cancellable,
                                                 GAsyncReadyCallback   callback,
                                                 gpointer              user_data);
gboolean        g_permission_acquire_finish     (GPermission          *permission,
                                                 GAsyncResult         *result,
                                                 GError              **error);

gboolean        g_permission_release            (GPermission          *permission,
                                                 GCancellable         *cancellable,
                                                 GError              **error);
void            g_permission_release_async      (GPermission          *permission,
                                                 GCancellable         *cancellable,
                                                 GAsyncReadyCallback   callback,
                                                 gpointer              user_data);
gboolean        g_permission_release_finish     (GPermission          *permission,
                                                 GAsyncResult         *result,
                                                 GError              **error);

gboolean        g_permission_get_allowed        (GPermission   *permission);
gboolean        g_permission_get_can_acquire    (GPermission   *permission);
gboolean        g_permission_get_can_release    (GPermission   *permission);

void            g_permission_impl_update        (GPermission  *permission,
                                                 gboolean      allowed,
                                                 gboolean      can_acquire,
                                                 gboolean      can_release);




