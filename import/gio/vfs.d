// Generated by gnome-h2d.rb <http://github.com/ddude/gnome.d>.

module gio.vfs;

/* GIO - GLib Input, Output and Streaming Library
 *
 * Copyright (C) 2006-2007 Red Hat, Inc.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * Author: Alexander Larsson <alexl@redhat.com>
 */

/+
#if !defined (__GIO_GIO_H_INSIDE__) && !defined (GIO_COMPILATION)
#error "Only <gio/gio.h> can be included directly."
//#endif
+/



public import gio.types;

extern(C):

//#define G_TYPE_VFS         (g_vfs_get_type ())
//#define G_VFS(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), G_TYPE_VFS, GVfs))
//#define G_VFS_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST((k), G_TYPE_VFS, GVfsClass))
//#define G_VFS_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), G_TYPE_VFS, GVfsClass))
//#define G_IS_VFS(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), G_TYPE_VFS))
//#define G_IS_VFS_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), G_TYPE_VFS))

/**
 * G_VFS_EXTENSION_POINT_NAME:
 *
 * Extension point for #GVfs functionality.
 * See <link linkend="extending-gio">Extending GIO</link>.
 */
//#define G_VFS_EXTENSION_POINT_NAME "gio-vfs"

/**
 * GVfs:
 *
 * Virtual File System object.
 **/
//struct _GVfsClass    GVfsClass;

struct GVfs {
  GObject parent_instance;
};

struct GVfsClass {
  GObjectClass parent_class;

  /* Virtual Table */

  gboolean              function(GVfs       *vfs) is_active;
  GFile               * function(GVfs       *vfs,
                                                       const(char)* path) get_file_for_path;
  GFile               * function(GVfs       *vfs,
                                                       const(char)* uri) get_file_for_uri;
  const(gchar*)* function(GVfs       *vfs) get_supported_uri_schemes;
  GFile               * function(GVfs       *vfs,
                                                       const(char)* parse_name) parse_name;

  /*< private >*/
  void                  function(GVfs       *vfs,
						       const(char)* filename,
						       guint64     device,
						       GFileAttributeMatcher *attribute_matcher,
						       GFileInfo  *info,
						       GCancellable *cancellable,
						       gpointer   *extra_data,
						       GDestroyNotify *free_extra_data) local_file_add_info;
  void                  function(GVfs       *vfs,
						       GFileAttributeInfoList *list) add_writable_namespaces;
  gboolean              function(GVfs       *vfs,
						       const(char)* filename,
						       GFileInfo  *info,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
						       GError    **error) local_file_set_attributes;
  void                  function(GVfs       *vfs,
						       const(char)* filename) local_file_removed;
  void                  function(GVfs       *vfs,
						       const(char)* source,
						       const(char)* dest) local_file_moved;
  /* Padding for future expansion */
  void function() _g_reserved1;
  void function() _g_reserved2;
  void function() _g_reserved3;
  void function() _g_reserved4;
  void function() _g_reserved5;
  void function() _g_reserved6;
  void function() _g_reserved7;
};

GType                 g_vfs_get_type                  () pure;

gboolean              g_vfs_is_active                 (GVfs       *vfs);
GFile *               g_vfs_get_file_for_path         (GVfs       *vfs,
                                                       const(char)* path);
GFile *               g_vfs_get_file_for_uri          (GVfs       *vfs,
                                                       const(char)* uri);
const(gchar*)* g_vfs_get_supported_uri_schemes  (GVfs       *vfs);

GFile *               g_vfs_parse_name                (GVfs       *vfs,
                                                       const(char)* parse_name);

GVfs *                g_vfs_get_default               ();
GVfs *                g_vfs_get_local                 ();




