// Generated by gnome-h2d.rb <http://github.com/ddude/gnome.d>.

module gio.types;

public import gobject.gobject;
public import gio.cancellable;
public import gio.dbusintrospection;
public import gio.socket;
public import gio.socketaddress;
public import gio.socketcontrolmessage;
public import gio.stream;
public import gio.inputstream;
public import gio.unixfdlist;
public import gio.fileiostream;
public import gio.socketconnection;
/* GIO - GLib Input, Output and Streaming Library
 *
 * Copyright (C) 2006-2007 Red Hat, Inc.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * Author: Alexander Larsson <alexl@redhat.com>
 */

/+
#if !defined (__GIO_GIO_H_INSIDE__) && !defined (GIO_COMPILATION)
#error "Only <gio/gio.h> can be included directly."
//#endif
+/



public import gio.enums;

extern(C):

//struct _GAppLaunchContext             GAppLaunchContext;
struct _GAppInfo;
alias _GAppInfo* GAppInfo; /* Dummy typedef */
struct _GAsyncResult;
alias _GAsyncResult* GAsyncResult; /* Dummy typedef */
struct _GAsyncInitable;
alias _GAsyncInitable* GAsyncInitable;
//struct _GBufferedInputStream          GBufferedInputStream;
//struct _GBufferedOutputStream         GBufferedOutputStream;
//struct _GCancellable                  GCancellable;
struct _GCharsetConverter;
alias _GCharsetConverter* GCharsetConverter;
struct _GConverter;
alias _GConverter* GConverter;
//struct _GConverterInputStream         GConverterInputStream;
//struct _GConverterOutputStream        GConverterOutputStream;
//struct _GDataInputStream              GDataInputStream;
//struct _GSimplePermission             GSimplePermission;
struct _GZlibCompressor;
alias _GZlibCompressor* GZlibCompressor;
struct _GZlibDecompressor;
alias _GZlibDecompressor* GZlibDecompressor;

//struct _GSimpleActionGroup            GSimpleActionGroup;
struct _GRemoteActionGroup;
alias _GRemoteActionGroup* GRemoteActionGroup;
struct _GDBusActionGroup;
alias _GDBusActionGroup* GDBusActionGroup;
struct _GActionMap;
alias _GActionMap* GActionMap;
struct _GActionGroup;
alias _GActionGroup* GActionGroup;
struct _GSimpleAction;
alias _GSimpleAction* GSimpleAction;
struct _GAction;
alias _GAction* GAction;
struct _GApplication;
alias _GApplication* GApplication;
struct _GApplicationCommandLine;
alias _GApplicationCommandLine* GApplicationCommandLine;
struct _GSettingsBackend;
alias _GSettingsBackend* GSettingsBackend;
//struct _GSettings                     GSettings;
struct _GPermission;
alias _GPermission* GPermission;

//struct _GMenuModel                    GMenuModel;

/**
 * GDrive:
 *
 * Opaque drive object.
 **/
struct _GDrive;
alias _GDrive* GDrive; /* Dummy typedef */
//struct _GFileEnumerator               GFileEnumerator;
//struct _GFileMonitor                  GFileMonitor;
//struct _GFilterInputStream            GFilterInputStream;
//struct _GFilterOutputStream           GFilterOutputStream;

/**
 * GFile:
 *
 * A handle to an object implementing the #GFileIface interface.
 * Generally stores a location within the file system. Handles do not
 * necessarily represent files or directories that currently exist.
 **/
struct _GFile;
alias _GFile* GFile; /* Dummy typedef */
struct _GFileInfo;
alias _GFileInfo* GFileInfo;

/**
 * GFileAttributeMatcher:
 *
 * Determines if a string matches a file attribute.
 **/
struct _GFileAttributeMatcher;
alias _GFileAttributeMatcher* GFileAttributeMatcher;
//struct _GFileAttributeInfo            GFileAttributeInfo;
struct _GFileAttributeInfoList;
alias _GFileAttributeInfoList* GFileAttributeInfoList;
struct _GFileDescriptorBased;
alias _GFileDescriptorBased* GFileDescriptorBased;
struct _GFileInputStream;
alias _GFileInputStream* GFileInputStream;
struct _GFileOutputStream;
alias _GFileOutputStream* GFileOutputStream;
//struct _GFileIOStream                 GFileIOStream;
struct _GFileIcon;
alias _GFileIcon* GFileIcon;
struct _GFilenameCompleter;
alias _GFilenameCompleter* GFilenameCompleter;


struct _GIcon;
alias _GIcon* GIcon; /* Dummy typedef */
struct _GInetAddress;
alias _GInetAddress* GInetAddress;
struct _GInetAddressMask;
alias _GInetAddressMask* GInetAddressMask;
//struct _GInetSocketAddress            GInetSocketAddress;
//struct _GInputStream                  GInputStream;
struct _GInitable;
alias _GInitable* GInitable;
struct _GIOModule;
alias _GIOModule* GIOModule;
struct _GIOExtensionPoint;
alias _GIOExtensionPoint* GIOExtensionPoint;
struct _GIOExtension;
alias _GIOExtension* GIOExtension;

/**
 * GIOSchedulerJob:
 *
 * Opaque class for defining and scheduling IO jobs.
 **/
struct _GIOSchedulerJob;
alias _GIOSchedulerJob* GIOSchedulerJob;
//struct _GIOStreamAdapter              GIOStreamAdapter;
struct _GLoadableIcon;
alias _GLoadableIcon* GLoadableIcon; /* Dummy typedef */
//struct _GMemoryInputStream            GMemoryInputStream;
//struct _GMemoryOutputStream           GMemoryOutputStream;

/**
 * GMount:
 *
 * A handle to an object implementing the #GMountIface interface.
 **/
struct _GMount;
alias _GMount* GMount; /* Dummy typedef */
struct _GMountOperation;
alias _GMountOperation* GMountOperation;
//struct _GNetworkAddress               GNetworkAddress;
struct _GNetworkMonitor;
alias _GNetworkMonitor* GNetworkMonitor;
//struct _GNetworkService               GNetworkService;
//struct _GOutputStream                 GOutputStream;
//struct _GIOStream                     GIOStream;
struct _GPollableInputStream;
alias _GPollableInputStream* GPollableInputStream; /* Dummy typedef */
struct _GPollableOutputStream;
alias _GPollableOutputStream* GPollableOutputStream; /* Dummy typedef */
//struct _GResolver                     GResolver;
/**
 * GResource:
 *
 * A resource bundle.
 *
 * Since: 2.32
 */
struct _GResource;
alias _GResource* GResource;
struct _GSeekable;
alias _GSeekable* GSeekable;
struct _GSimpleAsyncResult;
alias _GSimpleAsyncResult* GSimpleAsyncResult;

/**
 * GSocket:
 *
 * A lowlevel network socket object.
 *
 * Since: 2.22
 **/
//struct _GSocket                       GSocket;

/**
 * GSocketControlMessage:
 *
 * Base class for socket-type specific control messages that can be sent and
 * received over #GSocket.
 **/
//struct _GSocketControlMessage         GSocketControlMessage;
/**
 * GSocketClient:
 *
 * A helper class for network clients to make connections.
 *
 * Since: 2.22
 **/
//struct _GSocketClient                               GSocketClient;
/**
 * GSocketConnection:
 *
 * A socket connection GIOStream object for connection-oriented sockets.
 *
 * Since: 2.22
 **/
//struct _GSocketConnection                           GSocketConnection;
/**
 * GSocketListener:
 *
 * A helper class for network servers to listen for and accept connections.
 *
 * Since: 2.22
 **/
//struct _GSocketListener                             GSocketListener;
/**
 * GSocketService:
 *
 * A helper class for handling accepting incomming connections in the
 * glib mainloop.
 *
 * Since: 2.22
 **/
//struct _GSocketService                              GSocketService;
//struct _GSocketAddress                GSocketAddress;
struct _GSocketAddressEnumerator;
alias _GSocketAddressEnumerator* GSocketAddressEnumerator;
struct _GSocketConnectable;
alias _GSocketConnectable* GSocketConnectable;
struct _GSrvTarget;
alias _GSrvTarget* GSrvTarget;
/**
 * GTcpConnection:
 *
 * A #GSocketConnection for TCP/IP connections.
 *
 * Since: 2.22
 **/
//struct _GTcpConnection                              GTcpConnection;
//struct _GTcpWrapperConnection                       GTcpWrapperConnection;
/**
 * GThreadedSocketService:
 *
 * A helper class for handling accepting incoming connections in the
 * glib mainloop and handling them in a thread.
 *
 * Since: 2.22
 **/
//struct _GThreadedSocketService                      GThreadedSocketService;
struct _GThemedIcon;
alias _GThemedIcon* GThemedIcon;
struct _GTlsCertificate;
alias _GTlsCertificate* GTlsCertificate;
struct _GTlsClientConnection;
alias _GTlsClientConnection* GTlsClientConnection; /* Dummy typedef */
//struct _GTlsConnection                GTlsConnection;
struct _GTlsDatabase;
alias _GTlsDatabase* GTlsDatabase;
//struct _GTlsFileDatabase              GTlsFileDatabase;
struct _GTlsInteraction;
alias _GTlsInteraction* GTlsInteraction;
struct _GTlsPassword;
alias _GTlsPassword* GTlsPassword;
//struct _GTlsServerConnection          GTlsServerConnection; /* Dummy typedef */
//struct _GVfs                          GVfs; /* Dummy typedef */

/**
 * GProxyResolver:
 *
 * A helper class to enumerate proxies base on URI.
 *
 * Since: 2.26
 **/
struct _GProxyResolver;
alias _GProxyResolver* GProxyResolver;
struct _GProxy;
alias _GProxy* GProxy;
struct _GProxyAddress;
alias _GProxyAddress* GProxyAddress;
//struct _GProxyAddressEnumerator	      GProxyAddressEnumerator;

/**
 * GVolume:
 *
 * Opaque mountable volume object.
 **/
struct _GVolume;
alias _GVolume* GVolume; /* Dummy typedef */
//struct _GVolumeMonitor                GVolumeMonitor;

/**
 * GAsyncReadyCallback:
 * @source_object: the object the asynchronous operation was started with.
 * @res: a #GAsyncResult.
 * @user_data: user data passed to the callback.
 *
 * Type definition for a function that will be called back when an asynchronous
 * operation within GIO has been completed.
 **/
alias void function(GObject *source_object,
				     GAsyncResult *res,
				     gpointer user_data) GAsyncReadyCallback;

/**
 * GFileProgressCallback:
 * @current_num_bytes: the current number of bytes in the operation.
 * @total_num_bytes: the total number of bytes in the operation.
 * @user_data: user data passed to the callback.
 *
 * When doing file operations that may take a while, such as moving
 * a file or copying a file, a progress callback is used to pass how
 * far along that operation is to the application.
 **/
alias void function(goffset current_num_bytes,
                                       goffset total_num_bytes,
                                       gpointer user_data) GFileProgressCallback;

/**
 * GFileReadMoreCallback:
 * @file_contents: the data as currently read.
 * @file_size: the size of the data currently read.
 * @callback_data: data passed to the callback.
 *
 * When loading the partial contents of a file with g_file_load_partial_contents_async(),
 * it may become necessary to determine if any more data from the file should be loaded.
 * A #GFileReadMoreCallback function facilitates this by returning %TRUE if more data
 * should be read, or %FALSE otherwise.
 *
 * Returns: %TRUE if more data should be read back. %FALSE otherwise.
 **/
alias gboolean function(const(char)* file_contents,
                                            goffset file_size,
                                            gpointer callback_data) GFileReadMoreCallback;


/**
 * GIOSchedulerJobFunc:
 * @job: a #GIOSchedulerJob.
 * @cancellable: optional #GCancellable object, %NULL to ignore.
 * @user_data: the data to pass to callback function
 *
 * I/O Job function.
 *
 * Long-running jobs should periodically check the @cancellable
 * to see if they have been cancelled.
 *
 * Returns: %TRUE if this function should be called again to
 *    complete the job, %FALSE if the job is complete (or cancelled)
 **/
alias gboolean function(GIOSchedulerJob *job,
					 GCancellable    *cancellable,
					 gpointer         user_data) GIOSchedulerJobFunc;

/**
 * GSimpleAsyncThreadFunc:
 * @res: a #GSimpleAsyncResult.
 * @object: a #GObject.
 * @cancellable: optional #GCancellable object, %NULL to ignore.
 *
 * Simple thread function that runs an asynchronous operation and
 * checks for cancellation.
 **/
alias void function(GSimpleAsyncResult *res,
                                        GObject *object,
                                        GCancellable *cancellable) GSimpleAsyncThreadFunc;

/**
 * GSocketSourceFunc:
 * @socket: the #GSocket
 * @condition: the current condition at the source fired.
 * @user_data: data passed in by the user.
 *
 * This is the function type of the callback used for the #GSource
 * returned by g_socket_create_source().
 *
 * Returns: it should return %FALSE if the source should be removed.
 *
 * Since: 2.22
 */
alias gboolean function(GSocket *socket,
				       GIOCondition condition,
				       gpointer user_data) GSocketSourceFunc;

/**
 * GInputVector:
 * @buffer: Pointer to a buffer where data will be written.
 * @size: the available size in @buffer.
 *
 * Structure used for scatter/gather data input.
 * You generally pass in an array of #GInputVector<!-- -->s
 * and the operation will store the read data starting in the
 * first buffer, switching to the next as needed.
 *
 * Since: 2.22
 */
//struct _GInputVector GInputVector;

struct GInputVector {
  gpointer buffer;
  gsize size;
};

/**
 * GOutputVector:
 * @buffer: Pointer to a buffer of data to read.
 * @size: the size of @buffer.
 *
 * Structure used for scatter/gather data output.
 * You generally pass in an array of #GOutputVector<!-- -->s
 * and the operation will use all the buffers as if they were
 * one buffer.
 *
 * Since: 2.22
 */
//struct _GOutputVector GOutputVector;

struct GOutputVector {
  gconstpointer buffer;
  gsize size;
};

struct _GCredentials;
alias _GCredentials* GCredentials;
//struct _GUnixCredentialsMessage       GUnixCredentialsMessage;
//struct _GUnixFDList                   GUnixFDList;
struct _GDBusMessage;
alias _GDBusMessage* GDBusMessage;
struct _GDBusConnection;
alias _GDBusConnection* GDBusConnection;
struct _GDBusProxy;
alias _GDBusProxy* GDBusProxy;
struct _GDBusMethodInvocation;
alias _GDBusMethodInvocation* GDBusMethodInvocation;
struct _GDBusServer;
alias _GDBusServer* GDBusServer;
struct _GDBusAuthObserver;
alias _GDBusAuthObserver* GDBusAuthObserver;
//struct _GDBusErrorEntry               GDBusErrorEntry;
struct _GDBusInterfaceVTable;
alias _GDBusInterfaceVTable* GDBusInterfaceVTable;
//struct _GDBusSubtreeVTable            GDBusSubtreeVTable;
//struct _GDBusAnnotationInfo           GDBusAnnotationInfo;
//struct _GDBusArgInfo                  GDBusArgInfo;
struct _GDBusMethodInfo;
alias _GDBusMethodInfo* GDBusMethodInfo;
//struct _GDBusSignalInfo               GDBusSignalInfo;
//struct _GDBusPropertyInfo             GDBusPropertyInfo;
//struct _GDBusInterfaceInfo            GDBusInterfaceInfo;
//struct _GDBusNodeInfo                 GDBusNodeInfo;

/**
 * GCancellableSourceFunc:
 * @cancellable: the #GCancellable
 * @user_data: data passed in by the user.
 *
 * This is the function type of the callback used for the #GSource
 * returned by g_cancellable_source_new().
 *
 * Returns: it should return %FALSE if the source should be removed.
 *
 * Since: 2.28
 */
alias gboolean function(GCancellable *cancellable,
					    gpointer      user_data) GCancellableSourceFunc;

/**
 * GPollableSourceFunc:
 * @pollable_stream: the #GPollableInputStream or #GPollableOutputStream
 * @user_data: data passed in by the user.
 *
 * This is the function type of the callback used for the #GSource
 * returned by g_pollable_input_stream_create_source() and
 * g_pollable_output_stream_create_source().
 *
 * Returns: it should return %FALSE if the source should be removed.
 *
 * Since: 2.28
 */
alias gboolean function(GObject  *pollable_stream,
					 gpointer  user_data) GPollableSourceFunc;

struct _GDBusInterface;
alias _GDBusInterface* GDBusInterface; /* Dummy typedef */
struct _GDBusInterfaceSkeleton;
alias _GDBusInterfaceSkeleton* GDBusInterfaceSkeleton;
struct _GDBusObject;
alias _GDBusObject* GDBusObject;  /* Dummy typedef */
struct _GDBusObjectSkeleton;
alias _GDBusObjectSkeleton* GDBusObjectSkeleton;
struct _GDBusObjectProxy;
alias _GDBusObjectProxy* GDBusObjectProxy;
struct _GDBusObjectManager;
alias _GDBusObjectManager* GDBusObjectManager;  /* Dummy typedef */
struct _GDBusObjectManagerClient;
alias _GDBusObjectManagerClient* GDBusObjectManagerClient;
//struct _GDBusObjectManagerServer    GDBusObjectManagerServer;

/**
 * GDBusProxyTypeFunc:
 * @manager: A #GDBusObjectManagerClient.
 * @object_path: The object path of the remote object.
 * @interface_name: (allow-none): The interface name of the remote object or %NULL if a #GDBusObjectProxy #GType is requested.
 * @user_data: User data.
 *
 * Function signature for a function used to determine the #GType to
 * use for an interface proxy (if @interface_name is not %NULL) or
 * object proxy (if @interface_name is %NULL).
 *
 * This function is called in the
 * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
 * that @manager was constructed in.
 *
 * Returns: A #GType to use for the remote object. The returned type
 *   must be a #GDBusProxy<!-- -->- or #GDBusObjectProxy<!-- -->-derived
 *   type.
 *
 * Since: 2.30
 */
alias GType function(GDBusObjectManagerClient   *manager,
                                     const(gchar)*                object_path,
                                     const(gchar)*                interface_name,
                                     gpointer                    user_data) GDBusProxyTypeFunc;

struct _GTestDBus;
alias _GTestDBus* GTestDBus;




