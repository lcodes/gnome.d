// Generated by gnome-h2d.rb <http://github.com/ddude/gnome.d>.

module gio.actionmap;

/*
 * Copyright Â© 2010 Codethink Limited
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; either version 2 of the licence or (at
 * your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * Authors: Ryan Lortie <desrt@desrt.ca>
 */

/+
#if !defined (__GIO_GIO_H_INSIDE__) && !defined (GIO_COMPILATION)
#error "Only <gio/gio.h> can be included directly."
//#endif
+/



public import gio.types;

extern(C):


//#define G_TYPE_ACTION_MAP                                   (g_action_map_get_type ())
//#define G_ACTION_MAP(inst)                                  (G_TYPE_CHECK_INSTANCE_CAST ((inst),                      
//                                                             G_TYPE_ACTION_MAP, GActionMap))
//#define G_IS_ACTION_MAP(inst)                               (G_TYPE_CHECK_INSTANCE_TYPE ((inst),                      
//                                                             G_TYPE_ACTION_MAP))
//#define G_ACTION_MAP_GET_IFACE(inst)                        (G_TYPE_INSTANCE_GET_INTERFACE ((inst),                   
//                                                             G_TYPE_ACTION_MAP, GActionMapInterface))

//struct _GActionMapInterface                         GActionMapInterface;
//struct _GActionEntry                                GActionEntry;

struct GActionMapInterface {
  GTypeInterface g_iface;

  GAction * function(GActionMap  *action_map,
                               const(gchar)* action_name) lookup_action;
  void      function(GActionMap  *action_map,
                               GAction     *action) add_action;
  void      function(GActionMap  *action_map,
                               const(gchar)* action_name) remove_action;
};

struct GActionEntry {
  const(gchar)* name;

  void function(GSimpleAction *action,
                     GVariant      *parameter,
                     gpointer       user_data) activate;

  const(gchar)* parameter_type;

  const(gchar)* state;

  void function(GSimpleAction *action,
                         GVariant      *value,
                         gpointer       user_data) change_state;

  /*< private >*/
  gsize padding[3];
};

/+ GLIB_AVAILABLE_IN_2_32 +/
GType                   g_action_map_get_type                           () pure;

GAction *               g_action_map_lookup_action                      (GActionMap         *action_map,
                                                                         const(gchar)*        action_name);
void                    g_action_map_add_action                         (GActionMap         *action_map,
                                                                         GAction            *action);
void                    g_action_map_remove_action                      (GActionMap         *action_map,
                                                                         const(gchar)*        action_name);
void                    g_action_map_add_action_entries                 (GActionMap         *action_map,
                                                                         const(GActionEntry)* entries,
                                                                         gint                n_entries,
                                                                         gpointer            user_data);




